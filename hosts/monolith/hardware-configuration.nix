# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  inputs,
  ...
}: let
  pkgs-unstable = inputs.hyprland.inputs.nixpkgs.legacyPackages.${pkgs.stdenv.hostPlatform.system};
in {
  networking = {
    hostName = "monolith";
    networkmanager.enable = true;
  };

  fileSystems."/mnt/cave" = {
    device = "bruno@192.168.0.14:/mnt/data";
    fsType = "fuse.sshfs";
    options = [
      "identityfile=/home/bruno/.ssh/id_ed25519"
      "idmap=user"
      "x-systemd.automount" #< mount the filesystem automatically on first access
      "allow_other" #< don't restrict access to only the user which `mount`s it (because that's probably systemd who mounts it, not you)
      "user" #< allow manual `mount`ing, as ordinary user.
      "rw"
      "_netdev"
    ];
  };

  boot.supportedFilesystems = [
    "ntfs"
    "fuse.sshfs"
  ];

  hardware.graphics = {
    enable = true;
    extraPackages = with pkgs; [
      amdvlk
    ];
  };
  # Force radv
  environment.variables.AMD_VULKAN_ICD = "RADV";
  services.xserver.dpi = 108;
  services.xserver.videoDrivers = ["amdgpu"];

  programs = {
    gamescope = {
      enable = true;
      capSysNice = true;
    };
    steam = {
      enable = true;
      remotePlay.openFirewall = true; # Open ports in the firewall for Steam Remote Play
      dedicatedServer.openFirewall = true; # Open ports in the firewall for Source Dedicated Server
      localNetworkGameTransfers.openFirewall = true; # Open ports in the firewall for Steam Local Network Game Transfers
      gamescopeSession.enable = true;
    };
    gamemode = {
      enable = true;
    };
    corectrl = {
      enable = true;
      gpuOverclock.enable = true;
    };

    # Disabled because it is causing Qt to be recompiled
    # hyprland = {
    #   enable = true;
    #   # set the flake package
    #   package = inputs.hyprland.packages.${pkgs.stdenv.hostPlatform.system}.hyprland;
    #   # make sure to also set the portal package, so that they are in sync
    #   portalPackage = inputs.hyprland.packages.${pkgs.stdenv.hostPlatform.system}.xdg-desktop-portal-hyprland;
    # };
  };

  hardware.graphics = {
    package = pkgs-unstable.mesa;

    # if you also want 32-bit support (e.g for Steam)
    enable32Bit = true;
    package32 = pkgs-unstable.pkgsi686Linux.mesa;
  };

  services.samba = {
    enable = true;
    openFirewall = true;

    # You will still need to set up the user accounts to begin with:
    # $ sudo smbpasswd -a yourusername

    settings = {
      global = {
        browseable = "yes";
        "smb encrypt" = "required";
      };
      homes = {
        browseable = "no"; # note: each home will be browseable; the "homes" share will not.
        "read only" = "no";
        "guest ok" = "no";
      };
    };
  };

  ###############################################

  # THE BELOW CODE IS COPIED FROM THE AUTO-GENERATED 'configuration.nix'.
  # IT MAY CONTAIN EDITS.
  # Bootloader.

  boot = {
    loader = {
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
    };
  };

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "23.05"; # Did you read the comment?

  ###############################################

  # THE BELOW CODE IS COPIED FROM THE AUTO-GENERATED 'hardware-configuration.nix'.
  # IT MAY CONTAIN EDITS.

  imports = [(modulesPath + "/installer/scan/not-detected.nix")];

  # boot.initrd.availableKernelModules = ["nvme" "xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = ["amdgpu"];
  boot.kernelModules = ["kvm-amd"];
  boot.extraModulePackages = [];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/0f2bfbbf-d5f2-4595-8172-99ea3fd33765";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/072C-10A7";
    fsType = "vfat";
  };

  fileSystems."/mnt/red" = {
    device = "/dev/disk/by-uuid/182dc111-33a9-4853-abd7-867f05121aa8";
    fsType = "btrfs";
    options = ["nosuid" "nodev" "nofail" "x-gvfs-show"];
  };

  fileSystems."/mnt/extra" = {
    device = "/dev/disk/by-uuid/6649d4db-5724-4d8e-b8da-acf4aeaf06d3";
    fsType = "btrfs";
    options = ["nosuid" "nodev" "nofail" "x-gvfs-show"];
  };

  fileSystems."/mnt/windows" = {
    device = "/dev/disk/by-uuid/7ADEE1C1DEE175B3";
    fsType = "ntfs-3g";
    options = ["rw" "uid=1000" "x-gvfs-show"];
  };

  swapDevices = [{device = "/dev/disk/by-uuid/e0455362-aa9f-4dca-92f9-a9a75bcb8053";}];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp37s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp38s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
